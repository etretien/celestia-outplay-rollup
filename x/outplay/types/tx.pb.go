// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outplay/outplay/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateProfile struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DateOfBirth string `protobuf:"bytes,3,opt,name=dateOfBirth,proto3" json:"dateOfBirth,omitempty"`
	PlayingHand string `protobuf:"bytes,4,opt,name=playingHand,proto3" json:"playingHand,omitempty"`
	NtrpRating  string `protobuf:"bytes,5,opt,name=ntrpRating,proto3" json:"ntrpRating,omitempty"`
}

func (m *MsgCreateProfile) Reset()         { *m = MsgCreateProfile{} }
func (m *MsgCreateProfile) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProfile) ProtoMessage()    {}
func (*MsgCreateProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{0}
}
func (m *MsgCreateProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProfile.Merge(m, src)
}
func (m *MsgCreateProfile) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProfile.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProfile proto.InternalMessageInfo

func (m *MsgCreateProfile) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateProfile) GetDateOfBirth() string {
	if m != nil {
		return m.DateOfBirth
	}
	return ""
}

func (m *MsgCreateProfile) GetPlayingHand() string {
	if m != nil {
		return m.PlayingHand
	}
	return ""
}

func (m *MsgCreateProfile) GetNtrpRating() string {
	if m != nil {
		return m.NtrpRating
	}
	return ""
}

type MsgCreateProfileResponse struct {
}

func (m *MsgCreateProfileResponse) Reset()         { *m = MsgCreateProfileResponse{} }
func (m *MsgCreateProfileResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateProfileResponse) ProtoMessage()    {}
func (*MsgCreateProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{1}
}
func (m *MsgCreateProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateProfileResponse.Merge(m, src)
}
func (m *MsgCreateProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateProfileResponse proto.InternalMessageInfo

type MsgCreateChallenge struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Opponent string `protobuf:"bytes,2,opt,name=opponent,proto3" json:"opponent,omitempty"`
	Stake    string `protobuf:"bytes,3,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (m *MsgCreateChallenge) Reset()         { *m = MsgCreateChallenge{} }
func (m *MsgCreateChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgCreateChallenge) ProtoMessage()    {}
func (*MsgCreateChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{2}
}
func (m *MsgCreateChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateChallenge.Merge(m, src)
}
func (m *MsgCreateChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateChallenge proto.InternalMessageInfo

func (m *MsgCreateChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateChallenge) GetOpponent() string {
	if m != nil {
		return m.Opponent
	}
	return ""
}

func (m *MsgCreateChallenge) GetStake() string {
	if m != nil {
		return m.Stake
	}
	return ""
}

type MsgCreateChallengeResponse struct {
}

func (m *MsgCreateChallengeResponse) Reset()         { *m = MsgCreateChallengeResponse{} }
func (m *MsgCreateChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateChallengeResponse) ProtoMessage()    {}
func (*MsgCreateChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{3}
}
func (m *MsgCreateChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateChallengeResponse.Merge(m, src)
}
func (m *MsgCreateChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateChallengeResponse proto.InternalMessageInfo

type MsgAcceptChallenge struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChallengeId string `protobuf:"bytes,2,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
}

func (m *MsgAcceptChallenge) Reset()         { *m = MsgAcceptChallenge{} }
func (m *MsgAcceptChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptChallenge) ProtoMessage()    {}
func (*MsgAcceptChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{4}
}
func (m *MsgAcceptChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptChallenge.Merge(m, src)
}
func (m *MsgAcceptChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptChallenge proto.InternalMessageInfo

func (m *MsgAcceptChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAcceptChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

type MsgAcceptChallengeResponse struct {
}

func (m *MsgAcceptChallengeResponse) Reset()         { *m = MsgAcceptChallengeResponse{} }
func (m *MsgAcceptChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptChallengeResponse) ProtoMessage()    {}
func (*MsgAcceptChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{5}
}
func (m *MsgAcceptChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptChallengeResponse.Merge(m, src)
}
func (m *MsgAcceptChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptChallengeResponse proto.InternalMessageInfo

type MsgDeclineChallenge struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChallengeId string `protobuf:"bytes,2,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
}

func (m *MsgDeclineChallenge) Reset()         { *m = MsgDeclineChallenge{} }
func (m *MsgDeclineChallenge) String() string { return proto.CompactTextString(m) }
func (*MsgDeclineChallenge) ProtoMessage()    {}
func (*MsgDeclineChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{6}
}
func (m *MsgDeclineChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeclineChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeclineChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeclineChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeclineChallenge.Merge(m, src)
}
func (m *MsgDeclineChallenge) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeclineChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeclineChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeclineChallenge proto.InternalMessageInfo

func (m *MsgDeclineChallenge) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeclineChallenge) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

type MsgDeclineChallengeResponse struct {
}

func (m *MsgDeclineChallengeResponse) Reset()         { *m = MsgDeclineChallengeResponse{} }
func (m *MsgDeclineChallengeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeclineChallengeResponse) ProtoMessage()    {}
func (*MsgDeclineChallengeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{7}
}
func (m *MsgDeclineChallengeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeclineChallengeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeclineChallengeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeclineChallengeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeclineChallengeResponse.Merge(m, src)
}
func (m *MsgDeclineChallengeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeclineChallengeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeclineChallengeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeclineChallengeResponse proto.InternalMessageInfo

type MsgSubmitScore struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChallengeId string `protobuf:"bytes,2,opt,name=challengeId,proto3" json:"challengeId,omitempty"`
	Score       string `protobuf:"bytes,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *MsgSubmitScore) Reset()         { *m = MsgSubmitScore{} }
func (m *MsgSubmitScore) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitScore) ProtoMessage()    {}
func (*MsgSubmitScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{8}
}
func (m *MsgSubmitScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitScore.Merge(m, src)
}
func (m *MsgSubmitScore) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitScore) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitScore.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitScore proto.InternalMessageInfo

func (m *MsgSubmitScore) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitScore) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

func (m *MsgSubmitScore) GetScore() string {
	if m != nil {
		return m.Score
	}
	return ""
}

type MsgSubmitScoreResponse struct {
}

func (m *MsgSubmitScoreResponse) Reset()         { *m = MsgSubmitScoreResponse{} }
func (m *MsgSubmitScoreResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitScoreResponse) ProtoMessage()    {}
func (*MsgSubmitScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_931819704394d00f, []int{9}
}
func (m *MsgSubmitScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitScoreResponse.Merge(m, src)
}
func (m *MsgSubmitScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitScoreResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateProfile)(nil), "outplay.outplay.MsgCreateProfile")
	proto.RegisterType((*MsgCreateProfileResponse)(nil), "outplay.outplay.MsgCreateProfileResponse")
	proto.RegisterType((*MsgCreateChallenge)(nil), "outplay.outplay.MsgCreateChallenge")
	proto.RegisterType((*MsgCreateChallengeResponse)(nil), "outplay.outplay.MsgCreateChallengeResponse")
	proto.RegisterType((*MsgAcceptChallenge)(nil), "outplay.outplay.MsgAcceptChallenge")
	proto.RegisterType((*MsgAcceptChallengeResponse)(nil), "outplay.outplay.MsgAcceptChallengeResponse")
	proto.RegisterType((*MsgDeclineChallenge)(nil), "outplay.outplay.MsgDeclineChallenge")
	proto.RegisterType((*MsgDeclineChallengeResponse)(nil), "outplay.outplay.MsgDeclineChallengeResponse")
	proto.RegisterType((*MsgSubmitScore)(nil), "outplay.outplay.MsgSubmitScore")
	proto.RegisterType((*MsgSubmitScoreResponse)(nil), "outplay.outplay.MsgSubmitScoreResponse")
}

func init() { proto.RegisterFile("outplay/outplay/tx.proto", fileDescriptor_931819704394d00f) }

var fileDescriptor_931819704394d00f = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0xce, 0xd2, 0x30,
	0x18, 0xc6, 0x99, 0x7c, 0xf8, 0xe7, 0x25, 0x0a, 0xa9, 0x46, 0x9b, 0xa9, 0x13, 0xa7, 0x89, 0x1a,
	0xcd, 0x8c, 0x7a, 0x05, 0x82, 0x07, 0x7a, 0xb0, 0x88, 0x70, 0x60, 0x62, 0x62, 0x62, 0x19, 0x65,
	0x2c, 0x8e, 0xb6, 0x59, 0x4b, 0x02, 0x77, 0xe1, 0x45, 0x78, 0x31, 0x1e, 0x72, 0xe8, 0xa1, 0x81,
	0x0b, 0xf0, 0x16, 0xcc, 0xc6, 0x56, 0x47, 0x19, 0x42, 0xe2, 0x77, 0xb4, 0xbd, 0x4f, 0x9f, 0xbe,
	0xbf, 0xb6, 0x79, 0xf2, 0x02, 0xe6, 0x73, 0x25, 0x62, 0xb2, 0x7c, 0x5e, 0x7c, 0xd5, 0xc2, 0x13,
	0x09, 0x57, 0x1c, 0xb5, 0x72, 0xc5, 0xcb, 0xbf, 0xee, 0x77, 0x0b, 0xda, 0xbe, 0x0c, 0x7b, 0x09,
	0x25, 0x8a, 0xf6, 0x13, 0x3e, 0x89, 0x62, 0x8a, 0x30, 0x5c, 0x0a, 0x52, 0x81, 0x27, 0xd8, 0xea,
	0x58, 0x8f, 0xaf, 0x0c, 0x8a, 0x12, 0x21, 0x38, 0x63, 0x64, 0x46, 0xf1, 0x85, 0x4c, 0xce, 0xfe,
	0x51, 0x07, 0x9a, 0x63, 0xa2, 0xe8, 0xfb, 0x49, 0x37, 0x4a, 0xd4, 0x14, 0xd7, 0xb3, 0xa5, 0xb2,
	0x94, 0x3a, 0x52, 0x58, 0xc4, 0xc2, 0xb7, 0x84, 0x8d, 0xf1, 0xd9, 0xd6, 0x51, 0x92, 0x90, 0x03,
	0xc0, 0x54, 0x22, 0x06, 0x44, 0x45, 0x2c, 0xc4, 0x8d, 0xcc, 0x50, 0x52, 0x5c, 0x1b, 0xb0, 0x79,
	0xca, 0x01, 0x95, 0x82, 0x33, 0x49, 0xdd, 0x2f, 0x80, 0xf4, 0x5a, 0x6f, 0x4a, 0xe2, 0x98, 0xb2,
	0xf0, 0x5f, 0x77, 0xb0, 0xe1, 0x32, 0x17, 0x82, 0x33, 0xca, 0x54, 0x7e, 0x0f, 0x5d, 0xa3, 0x1b,
	0xd0, 0x90, 0x8a, 0x7c, 0xa5, 0xf9, 0x2d, 0xb6, 0x85, 0x7b, 0x07, 0xec, 0x7d, 0x82, 0xe6, 0xf7,
	0x33, 0xfe, 0xeb, 0x20, 0xa0, 0x42, 0x9d, 0xc2, 0xef, 0x40, 0x33, 0x28, 0x6c, 0xef, 0xc6, 0xf9,
	0x11, 0xca, 0x52, 0xce, 0x33, 0x3a, 0x6a, 0xde, 0x07, 0xb8, 0xee, 0xcb, 0xf0, 0x0d, 0x0d, 0xe2,
	0x88, 0xd1, 0xf3, 0x01, 0xde, 0x85, 0xdb, 0x15, 0x2d, 0x35, 0x71, 0x04, 0xd7, 0x7c, 0x19, 0x0e,
	0xe7, 0xa3, 0x59, 0xa4, 0x86, 0x01, 0x4f, 0xfe, 0x0b, 0x96, 0xbd, 0x71, 0xda, 0x44, 0xbf, 0x71,
	0x5a, 0xb8, 0x18, 0x6e, 0xee, 0x32, 0x0a, 0xfa, 0xcb, 0xdf, 0x75, 0xa8, 0xfb, 0x32, 0x44, 0x9f,
	0xe1, 0xea, 0x6e, 0x4c, 0xef, 0x7b, 0x46, 0x9a, 0x3d, 0x33, 0x23, 0xf6, 0x93, 0xa3, 0x96, 0x02,
	0x83, 0x02, 0x68, 0x99, 0x19, 0x7a, 0x70, 0x78, 0xb7, 0x36, 0xd9, 0x4f, 0x4f, 0x30, 0x95, 0x21,
	0x66, 0x50, 0x2a, 0x21, 0x86, 0xa9, 0x1a, 0x72, 0x20, 0x20, 0x68, 0x02, 0xed, 0xbd, 0x74, 0x3c,
	0xac, 0x6a, 0x60, 0xba, 0xec, 0x67, 0xa7, 0xb8, 0x34, 0xe7, 0x23, 0x34, 0xcb, 0x99, 0xb8, 0x57,
	0xb5, 0xb9, 0x64, 0xb0, 0x1f, 0x1d, 0x31, 0x14, 0x8d, 0xbb, 0x2f, 0x7e, 0xac, 0x1d, 0x6b, 0xb5,
	0x76, 0xac, 0x5f, 0x6b, 0xc7, 0xfa, 0xb6, 0x71, 0x6a, 0xab, 0x8d, 0x53, 0xfb, 0xb9, 0x71, 0x6a,
	0x9f, 0x6e, 0x15, 0x13, 0x6d, 0xf1, 0x77, 0xb6, 0x2d, 0x05, 0x95, 0xa3, 0x8b, 0xd9, 0x7c, 0x7b,
	0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xc4, 0x9e, 0x00, 0xfb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateProfile(ctx context.Context, in *MsgCreateProfile, opts ...grpc.CallOption) (*MsgCreateProfileResponse, error)
	CreateChallenge(ctx context.Context, in *MsgCreateChallenge, opts ...grpc.CallOption) (*MsgCreateChallengeResponse, error)
	AcceptChallenge(ctx context.Context, in *MsgAcceptChallenge, opts ...grpc.CallOption) (*MsgAcceptChallengeResponse, error)
	DeclineChallenge(ctx context.Context, in *MsgDeclineChallenge, opts ...grpc.CallOption) (*MsgDeclineChallengeResponse, error)
	SubmitScore(ctx context.Context, in *MsgSubmitScore, opts ...grpc.CallOption) (*MsgSubmitScoreResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateProfile(ctx context.Context, in *MsgCreateProfile, opts ...grpc.CallOption) (*MsgCreateProfileResponse, error) {
	out := new(MsgCreateProfileResponse)
	err := c.cc.Invoke(ctx, "/outplay.outplay.Msg/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateChallenge(ctx context.Context, in *MsgCreateChallenge, opts ...grpc.CallOption) (*MsgCreateChallengeResponse, error) {
	out := new(MsgCreateChallengeResponse)
	err := c.cc.Invoke(ctx, "/outplay.outplay.Msg/CreateChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptChallenge(ctx context.Context, in *MsgAcceptChallenge, opts ...grpc.CallOption) (*MsgAcceptChallengeResponse, error) {
	out := new(MsgAcceptChallengeResponse)
	err := c.cc.Invoke(ctx, "/outplay.outplay.Msg/AcceptChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeclineChallenge(ctx context.Context, in *MsgDeclineChallenge, opts ...grpc.CallOption) (*MsgDeclineChallengeResponse, error) {
	out := new(MsgDeclineChallengeResponse)
	err := c.cc.Invoke(ctx, "/outplay.outplay.Msg/DeclineChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitScore(ctx context.Context, in *MsgSubmitScore, opts ...grpc.CallOption) (*MsgSubmitScoreResponse, error) {
	out := new(MsgSubmitScoreResponse)
	err := c.cc.Invoke(ctx, "/outplay.outplay.Msg/SubmitScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateProfile(context.Context, *MsgCreateProfile) (*MsgCreateProfileResponse, error)
	CreateChallenge(context.Context, *MsgCreateChallenge) (*MsgCreateChallengeResponse, error)
	AcceptChallenge(context.Context, *MsgAcceptChallenge) (*MsgAcceptChallengeResponse, error)
	DeclineChallenge(context.Context, *MsgDeclineChallenge) (*MsgDeclineChallengeResponse, error)
	SubmitScore(context.Context, *MsgSubmitScore) (*MsgSubmitScoreResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateProfile(ctx context.Context, req *MsgCreateProfile) (*MsgCreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (*UnimplementedMsgServer) CreateChallenge(ctx context.Context, req *MsgCreateChallenge) (*MsgCreateChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallenge not implemented")
}
func (*UnimplementedMsgServer) AcceptChallenge(ctx context.Context, req *MsgAcceptChallenge) (*MsgAcceptChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptChallenge not implemented")
}
func (*UnimplementedMsgServer) DeclineChallenge(ctx context.Context, req *MsgDeclineChallenge) (*MsgDeclineChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineChallenge not implemented")
}
func (*UnimplementedMsgServer) SubmitScore(ctx context.Context, req *MsgSubmitScore) (*MsgSubmitScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitScore not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outplay.outplay.Msg/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateProfile(ctx, req.(*MsgCreateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outplay.outplay.Msg/CreateChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateChallenge(ctx, req.(*MsgCreateChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outplay.outplay.Msg/AcceptChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptChallenge(ctx, req.(*MsgAcceptChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeclineChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeclineChallenge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeclineChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outplay.outplay.Msg/DeclineChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeclineChallenge(ctx, req.(*MsgDeclineChallenge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outplay.outplay.Msg/SubmitScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitScore(ctx, req.(*MsgSubmitScore))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "outplay.outplay.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProfile",
			Handler:    _Msg_CreateProfile_Handler,
		},
		{
			MethodName: "CreateChallenge",
			Handler:    _Msg_CreateChallenge_Handler,
		},
		{
			MethodName: "AcceptChallenge",
			Handler:    _Msg_AcceptChallenge_Handler,
		},
		{
			MethodName: "DeclineChallenge",
			Handler:    _Msg_DeclineChallenge_Handler,
		},
		{
			MethodName: "SubmitScore",
			Handler:    _Msg_SubmitScore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outplay/outplay/tx.proto",
}

func (m *MsgCreateProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NtrpRating) > 0 {
		i -= len(m.NtrpRating)
		copy(dAtA[i:], m.NtrpRating)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NtrpRating)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PlayingHand) > 0 {
		i -= len(m.PlayingHand)
		copy(dAtA[i:], m.PlayingHand)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PlayingHand)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DateOfBirth) > 0 {
		i -= len(m.DateOfBirth)
		copy(dAtA[i:], m.DateOfBirth)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DateOfBirth)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stake) > 0 {
		i -= len(m.Stake)
		copy(dAtA[i:], m.Stake)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Stake)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Opponent) > 0 {
		i -= len(m.Opponent)
		copy(dAtA[i:], m.Opponent)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Opponent)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeclineChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeclineChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeclineChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeclineChallengeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeclineChallengeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeclineChallengeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Score) > 0 {
		i -= len(m.Score)
		copy(dAtA[i:], m.Score)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Score)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DateOfBirth)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PlayingHand)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NtrpRating)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Opponent)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Stake)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeclineChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeclineChallengeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Score)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateOfBirth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DateOfBirth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayingHand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayingHand = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NtrpRating", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NtrpRating = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Opponent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stake = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeclineChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeclineChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeclineChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeclineChallengeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeclineChallengeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeclineChallengeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Score = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
